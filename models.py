from datetime import datetime
from werkzeug.security import  generate_password_hash, check_password_hash
from flask_login import UserMixin
from application import db, login

fav_posts = db.Table(
    'fav_posts', 
    db.Column('user_id', db.Integer, db.ForeignKey(
        'user.id', ondelete="cascade"), nullable=False),
    db.Column('post_id', db.Integer, db.ForeignKey(
        'post.id', ondelete="cascade"), nullable=False),
    db.PrimaryKeyConstraint('user_id', 'post_id', name='favorites_pk'))

db.Index('fav_posts_idx_user', fav_posts.c.user_id)
db.Index('fav_posts_idx_post', fav_posts.c.post_id)


class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(32), unique=True)
    email = db.Column(db.String(128), unique=True)
    # 94 is the observed length of the hash generated by werkzeug
    password_hash = db.Column(db.String(94), nullable=False)
    posts = db.relationship(
        'Post', order_by='Post.timestamp.desc()', backref='user', lazy='dynamic', 
        cascade="all, delete", passive_deletes="True")
    favorites = db.relationship(
        'Post', secondary=fav_posts, order_by='Post.timestamp.desc()', lazy='dynamic',
        cascade="all, delete", passive_deletes="True",
        backref=db.backref(
            'likers', lazy='dynamic',
            cascade="all, delete", passive_deletes="True")
        )

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)
    def check_password(self, password):
        return check_password_hash(self.password_hash, password)
    
    def fav(self, post):
        if not self.likes(post):
            self.favorites.append(post)
    def unfav(self, post):
        if self.likes(post):
            self.favorites.remove(post)

    def likes(self, post):
        return self.favorites.filter(
            fav_posts.c.post_id == post.id).first() is not None

    def __repr__(self):
        return f"<User {self.username}>"

@login.user_loader
def load_user(id):
    return User.query.get(id)


class Post(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    text = db.Column(db.String(512), nullable=False)
    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)
    user_id = db.Column(
        db.Integer, db.ForeignKey('user.id', ondelete="cascade"), 
        index=True, nullable=False)

    def __repr__(self):
        if len(self.text) < 50:
            short_version = self.text
        else:
            pos_space = self.text.rfind(" ", 0, 45)
            if pos_space == -1:
                pos_space = 45
            short_version = f"{self.text[:pos_space]} ..."
        return f"<Post {short_version}>"